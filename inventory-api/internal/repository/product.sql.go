// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: product.sql

package repository

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const countProduct = `-- name: CountProduct :one
SELECT COUNT(id) FROM products
`

func (q *Queries) CountProduct(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, countProduct)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createProduct = `-- name: CreateProduct :one
INSERT INTO products(
    name,
    price,
    description
) VALUES ($1, $2, $3)
RETURNING id, price, name, description, created_at, updated_at
`

type CreateProductParams struct {
	Name        string      `json:"name"`
	Price       float64     `json:"price"`
	Description pgtype.Text `json:"description"`
}

func (q *Queries) CreateProduct(ctx context.Context, arg CreateProductParams) (Product, error) {
	row := q.db.QueryRow(ctx, createProduct, arg.Name, arg.Price, arg.Description)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Price,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateProduct = `-- name: UpdateProduct :one
UPDATE products
SET
    name = COALESCE($2, name),
    price = COALESCE($3, price),
    description = COALESCE($4, description)
WHERE
    id = $1
RETURNING id, price, name, description, created_at, updated_at
`

type UpdateProductParams struct {
	ID          int32         `json:"id"`
	Name        pgtype.Text   `json:"name"`
	Price       pgtype.Float8 `json:"price"`
	Description pgtype.Text   `json:"description"`
}

func (q *Queries) UpdateProduct(ctx context.Context, arg UpdateProductParams) (Product, error) {
	row := q.db.QueryRow(ctx, updateProduct,
		arg.ID,
		arg.Name,
		arg.Price,
		arg.Description,
	)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Price,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
